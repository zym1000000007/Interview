/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        TreeNode *root=nullptr;
        vector<int> lpre,rpre,lvin,rvin;
        if ((pre.size() < 1) || (vin.size() < 1) || (pre.size() != vin.size())) {
        } else {
            int valOfRoot=pre[0];
            int indexOfRoot=-1;
            for (int i=0;i<vin.size();i++) {
                if (vin[i] == valOfRoot) {
                    indexOfRoot = i;
                    break;
                }
            }
            if (indexOfRoot != -1) {
                root = new TreeNode(valOfRoot);
                root->val = valOfRoot;
                for (int i=1;i<=indexOfRoot;i++) {
                    lpre.push_back(pre[i]);
                }
                for (int i=indexOfRoot+1;i<pre.size();i++) {
                    rpre.push_back(pre[i]);
                }
                for (int i=0;i<indexOfRoot;i++) {
                    lvin.push_back(vin[i]);
                }
                for (int i=indexOfRoot+1;i<vin.size();i++) {
                    rvin.push_back(vin[i]);
                }
                root->left=reConstructBinaryTree(lpre,lvin);
                root->right=reConstructBinaryTree(rpre,rvin);
            }
        }
        return root;
    }
};
